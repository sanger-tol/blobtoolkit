/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: "SAMPLESHEET_CHECK" {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/blobtoolkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: "WINDOWMASKER_MKCOUNTS" {
        ext.args = "-infmt fasta -sformat obinary"
        publishDir = [
            path: { "${params.outdir}/repeats/windowmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename.substring(0, filename.length() - 3) + "obinary" }
        ]
    }

    withName: "WINDOWMASKER_USTAT" {
        ext.args = "-infmt fasta -dust T -outfmt fasta"
        publishDir = [
            path: { "${params.outdir}/repeats/windowmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: "MINIMAP2_HIC" {
        ext.args = { "-ax sr -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
    }

    withName: "MINIMAP2_ILMN" {
        ext.args = { "-ax sr -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
    }

    withName: "MINIMAP2_CCS" {
        ext.args = { "-ax map-hifi --cs=short -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
    }

    withName: "MINIMAP2_CLR" {
        ext.args = { "-ax map-pb -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
    }

    withName: "MINIMAP2_ONT" {
        ext.args = { "-ax map-ont -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
    }

    withName: "MINIMAP2_.*" {
        publishDir = [
            path: { "${params.outdir}/read_mapping/${meta.datatype}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: "SAMTOOLS_VIEW" {
        ext.args = "--output-fmt bam --write-index"
    }

    withName: "SAMTOOLS_INDEX" {
        ext.args = "-c"
    }

    withName: "PIGZ_COMPRESS" {
        publishDir = [
            path: { "${params.outdir}/base_content" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename.minus("fw_out/") }
        ]
    }

    withName: "BLOBTK_DEPTH" {
        publishDir = [
            path: { "${params.outdir}/read_mapping/${meta.datatype}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : "${meta.id}.coverage.1k.bed.gz" }
        ]
    }

    withName: "BUSCO" {
        // Obey "use_work_dir_as_temp", except for large genomes
        scratch = { !params.use_work_dir_as_temp || (meta.genome_size < 2000000000) }
        ext.args = { 'test' in workflow.profile.tokenize(',') ?
                        // Additional configuration to speed processes up during testing.
                        // Note: BUSCO *must* see the double-quotes around the parameters
                        '--force --metaeuk_parameters \'"-s=2"\' --metaeuk_rerun_parameters \'"-s=2"\''
                    : '--force' }
    }

    withName: "RESTRUCTUREBUSCODIR" {
        publishDir = [
            path: { "${params.outdir}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: "DIAMOND_BLASTP" {
        ext.args = "--evalue 1.0e-25  --max-target-seqs 10 --max-hsps 1"
    }

    withName: "DIAMOND_BLASTX" {
        ext.args = "--evalue 1.0e-25  --max-target-seqs 10 --max-hsps 1"
    }

    withName: "BLOBTK_DEPTH" {
        ext.args = "-s 1000"
    }

    withName: "BLOBTOOLKIT_WINDOWSTATS" {
        ext.args = "--window 0.1 --window 0.01 --window 1 --window 100000 --window 1000000"
    }

    withName: "BLOBTOOLKIT_CREATEBLOBDIR" {
        ext.args = "--evalue 1.0e-25 --hit-count 10"
    }

    withName: "BLOBTOOLKIT_UPDATEBLOBDIR" {
        ext.args = "--evalue 1.0e-25 --hit-count 10"
    }

    withName: "BLOBTOOLKIT_CHUNK" {
        ext.args = "--chunk 100000 --overlap 0 --max-chunks 10 --min-length 1000"
    }

    withName: "BLOBTOOLKIT_UNCHUNK" {
        ext.args = "--count 10"
    }

    withName: "NOHIT_LIST" {
        ext.args = "1.0e-25"
    }

    withName: "BLAST_BLASTN" {
        ext.args = "-task megablast -outfmt '6 qseqid staxids bitscore std' -max_target_seqs 10 -max_hsps 1 -evalue 1.0e-10 -lcase_masking -dust '20 64 1'"
    }

    withName: "CUSTOM_DUMPSOFTWAREVERSIONS" {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/blobtoolkit" },
            mode: params.publish_dir_mode,
            pattern: "*_versions.yml"
        ]
    }

    withName: "COMPRESSBLOBDIR" {
        publishDir = [
            path: { "${params.outdir}/blobtoolkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: "BLOBTK_IMAGES" {
        publishDir = [
            path: { "${params.outdir}/blobtoolkit/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

