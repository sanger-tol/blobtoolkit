/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/blobtoolkit Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // Check the defaults for all processes
    cpus   = { 1      * task.attempt }
    memory = { 6.GB   * task.attempt }
    time   = { 4.h    * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 5
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = 1
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }
    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }

    withName: '.*:MINIMAP2_ALIGNMENT:MINIMAP2_CCS' {
        cpus   = { log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) }
        memory = { 800.MB * log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) + 14.GB * Math.ceil( Math.pow(meta2.genome_size / 1000000000, 0.6)) * task.attempt }
        time   = { 4.h * Math.ceil( meta.read_count   / 1000000   ) * task.attempt }
    }

    // Extrapolated from the HIFI settings on the basis of 1 ONT alignment. CLR assumed to behave the same way as ONT
    withName: '.*:MINIMAP2_ALIGNMENT:MINIMAP2_(CLR|ONT)' {
        cpus   = { log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) }
        memory = { 800.MB * log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) + 30.GB * Math.ceil( Math.pow(meta2.genome_size / 1000000000, 0.6)) * task.attempt }
        time   = { 1.h  * Math.ceil( meta.read_count   / 1000000   ) * task.attempt }
    }

    // Baased on a handful of runs
    withName: '.*:MINIMAP2_ALIGNMENT:MINIMAP2_(HIC|ILMN)' {
        cpus   = { log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) }
        memory = { 800.MB * log_increase_cpus(4, 2*task.attempt, meta.read_count/1000000, 2) + 14.GB * Math.ceil( Math.pow(meta2.genome_size / 1000000000, 0.6)) * task.attempt }
        time   = { 1.h  * Math.ceil( meta.read_count   / 75000000   ) * task.attempt }
    }

    withName: 'WINDOWSTATS_INPUT' {
        cpus   = 1
        // 2 GB per 1 Gbp
        memory = { 2.GB * task.attempt * Math.ceil(meta.genome_size / 1000000000) }
        time   = { 4.h  * task.attempt }
    }

    withName: 'BLOBTOOLKIT_WINDOWSTATS' {
        cpus   = 1
        // 3 GB per 1 Gbp
        memory = { 3.GB * task.attempt * Math.ceil(meta.genome_size / 1000000000) }
        time   = { 4.h  * task.attempt }
    }

    withName: 'FASTAWINDOWS' {
        // 1 CPU per 1 Gbp
        cpus   = { Math.ceil(meta.genome_size / 1000000000) }
        // 100 MB per 45 Mbp
        memory = { 100.MB * task.attempt * Math.ceil(meta.genome_size / 45000000) }
    }

    withName: BUSCO {
        // The formulas below are equivalent to these ranges:
        // Gbp:    [ 1,  2,  4,   8,  16]
        // CPUs:   [ 8, 12, 16,  20,  24]
        // GB RAM: [16, 32, 64, 128, 256]
        memory = { 1.GB * Math.pow(2, 3 + task.attempt + Math.ceil(positive_log(meta.genome_size/1000000000, 2))) }
        cpus   = { log_increase_cpus(4, 4*task.attempt, Math.ceil(meta.genome_size/1000000000), 2) }
        time   = { 3.h * Math.ceil(meta.genome_size/1000000000) * task.attempt }
    }

    withName: "BLAST_BLASTN" {

        // There are blast failures we don't know how to fix. We just give up after 3 attempts
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? (task.attempt == 3 ? 'ignore' : 'retry') : 'finish' }


        // Most jobs complete quickly but some need a lot longer. For those outliers,
        // the CPU usage remains usually low, averaging a single CPU
        cpus   = { task.attempt == 1 ? 4 : 1 }
        memory = 2.GB
        time   = { task.attempt == 1 ? 4.h : ( task.attempt == 2 ? 47.h : 167.h ) }
    }
}
